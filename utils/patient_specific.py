#  MIT License
#
#  Copyright (c)2020 Embedded System Lab, EPFL
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

import numpy as np
from sklearn.metrics import confusion_matrix, accuracy_score, recall_score
import utils.data as dt
import pprint
from tensorflow.keras.models import load_model
import tensorflow as tf
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

pat_list_test = ['pat_26102', 'pat_96002', 'pat_103002', 'pat_102',
                 'pat_109502', 'pat_85202', 'pat_21602', 'pat_32502', 'pat_92102',
                 'pat_58602', 'pat_111902', 'pat_79502', 'pat_7302', 'pat_93902',
                 'pat_8902', 'pat_30002', 'pat_45402', 'pat_23902', 'pat_46702',
                 'pat_75202', 'pat_11002', 'pat_32702', 'pat_59102', 'pat_56402',
                 'pat_30802']

conf_GAN = [
    [52, 108, 89, 32, 10, 26, 167, 40, 52, 225, 59, 259, 1253, 336, 56, 16, 136, 2, 25, 3, 104, 311, 76, 158, 264],
    [358, 65, 44, 8, 15, 33, 250, 25, 19, 214, 10, 558, 901, 308, 145, 55, 215, 2, 10, 10, 79, 187, 99, 206, 329],
    [91, 53, 2340, 17, 361, 11, 95, 68, 676, 123, 316, 254, 523, 65, 18, 12, 127, 0, 5, 5, 568, 80, 130, 39, 84],
    [84, 133, 47, 18, 6, 21, 246, 124, 7, 323, 10, 367, 705, 156, 348, 8, 220, 8, 12, 21, 195, 606, 46, 128, 150],
    [21, 64, 24, 6, 0, 2, 162, 58, 0, 275, 0, 103, 256, 125, 136, 5, 365, 0, 11, 5, 17, 112, 36, 18, 8],
    [23, 288, 37, 32, 5, 10, 126, 51, 3, 469, 5, 75, 359, 119, 90, 3, 245, 1, 10, 4, 84, 149, 25, 77, 107],
    [79, 131, 35, 22, 9, 15, 219, 128, 19, 349, 21, 385, 728, 179, 238, 2, 243, 4, 14, 15, 178, 475, 52, 142, 143],
    [89, 305, 87, 57, 3, 36, 263, 134, 43, 470, 22, 283, 885, 192, 272, 23, 394, 6, 37, 13, 152, 423, 129, 345, 143],
    [69, 118, 829, 5, 90, 35, 240, 156, 50, 174, 932, 197, 537, 183, 104, 22, 246, 1, 42, 12, 65, 214, 205, 32, 190],
    [79, 126, 73, 33, 11, 10, 253, 51, 25, 562, 19, 149, 584, 160, 208, 2, 373, 8, 23, 23, 125, 270, 35, 57, 129],
    [289, 82, 3, 11, 0, 33, 385, 39, 4, 251, 0, 189, 316, 31, 55, 21, 104, 3, 3, 6, 42, 107, 62, 76, 48],
    [30, 309, 15, 94, 4, 38, 467, 93, 12, 295, 8, 90, 953, 60, 150, 0, 272, 4, 16, 40, 328, 524, 50, 148, 68],
    [106, 335, 351, 147, 33, 37, 555, 240, 123, 804, 299, 305, 1185, 443, 362, 28, 933, 5, 20, 78, 305, 513, 118, 245,
     184],
    [365, 247, 168, 12, 31, 83, 262, 129, 18, 343, 5, 986, 1865, 305, 223, 43, 557, 6, 22, 98, 161, 402, 540, 130, 328],
    [124, 149, 11, 9, 12, 40, 282, 81, 0, 439, 2, 534, 1157, 123, 48, 13, 553, 3, 21, 26, 101, 356, 245, 49, 43],
    [121, 64, 145, 34, 15, 17, 157, 78, 57, 269, 21, 292, 778, 115, 144, 11, 390, 1, 35, 4, 79, 258, 71, 208, 33],
    [66, 177, 87, 41, 17, 23, 273, 142, 11, 317, 46, 249, 575, 114, 61, 7, 244, 3, 11, 23, 197, 351, 78, 118, 117],
    [52, 92, 104, 38, 24, 26, 254, 69, 43, 179, 66, 208, 916, 151, 87, 4, 197, 2, 16, 11, 81, 346, 80, 96, 216],
    [73, 239, 6, 9, 1, 7, 69, 48, 3, 333, 0, 187, 778, 241, 119, 28, 320, 1, 24, 7, 29, 192, 57, 123, 77],
    [158, 100, 89, 6, 48, 52, 263, 59, 32, 159, 37, 529, 1358, 377, 79, 47, 256, 2, 24, 66, 71, 232, 160, 73, 286],
    [148, 53, 53, 16, 6, 54, 251, 51, 30, 154, 21, 215, 1375, 140, 75, 10, 226, 1, 11, 4, 97, 579, 91, 203, 214],
    [194, 238, 163, 36, 45, 64, 366, 51, 25, 559, 165, 228, 690, 288, 112, 71, 109, 4, 2, 44, 70, 406, 181, 151, 272],
    [87, 63, 136, 18, 16, 54, 504, 169, 15, 638, 69, 444, 794, 93, 123, 1, 302, 10, 27, 70, 265, 365, 178, 116, 66],
    [45, 257, 66, 97, 16, 27, 323, 120, 2, 1339, 15, 113, 903, 211, 459, 4, 641, 6, 12, 47, 139, 454, 59, 169, 60],
    [76, 211, 117, 6, 11, 4, 121, 71, 22, 646, 29, 141, 562, 51, 483, 15, 294, 8, 5, 12, 32, 774, 58, 47, 20]]

conf_seiz = [[63, 2, 0, 6, 0, 0, 0, 0, 0, 8, 0, 18, 77, 22, 24, 1, 26, 0, 5, 11, 0, 28, 27, 4, 1],
             [4, 107, 0, 1, 0, 1, 0, 17, 0, 19, 0, 61, 66, 45, 11, 17, 31, 2, 3, 2, 5, 9, 3, 18, 66],
             [0, 0, 193, 0, 87, 0, 0, 0, 34, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [5, 3, 0, 230, 0, 3, 98, 43, 0, 23, 0, 35, 9, 119, 9, 3, 3, 28, 8, 22, 5, 6, 38, 95, 22],
             [0, 0, 202, 1, 1289, 0, 0, 0, 160, 0, 100, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0],
             [82, 21, 0, 13, 0, 55, 14, 27, 0, 94, 0, 53, 29, 107, 0, 18, 6, 21, 0, 3, 13, 1, 16, 60, 45],
             [0, 0, 0, 13, 0, 0, 265, 4, 0, 1, 0, 0, 12, 12, 0, 0, 0, 3, 0, 3, 4, 0, 0, 40, 0],
             [0, 20, 0, 36, 0, 0, 13, 117, 0, 6, 0, 36, 23, 19, 19, 1, 55, 10, 34, 160, 73, 3, 24, 38, 1],
             [0, 0, 142, 0, 5, 0, 0, 0, 447, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [27, 17, 0, 26, 0, 20, 262, 90, 0, 85, 0, 12, 290, 60, 4, 11, 26, 16, 0, 7, 6, 5, 8, 117, 156],
             [0, 10, 935, 0, 212, 0, 0, 0, 405, 0, 1005, 0, 0, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 24, 0],
             [7, 17, 0, 1, 0, 1, 1, 26, 0, 8, 0, 241, 112, 166, 10, 4, 84, 1, 10, 5, 7, 12, 8, 5, 3],
             [1, 1, 0, 5, 0, 43, 13, 18, 0, 3, 0, 10, 411, 16, 18, 16, 1, 6, 4, 11, 9, 2, 1, 27, 76],
             [7, 6, 0, 2, 0, 0, 0, 3, 0, 6, 0, 44, 18, 224, 26, 4, 53, 17, 14, 10, 3, 5, 6, 6, 7],
             [0, 1, 0, 18, 0, 9, 50, 107, 0, 15, 0, 3, 86, 41, 22, 1, 17, 6, 2, 10, 6, 0, 0, 100, 87],
             [7, 29, 0, 34, 0, 0, 11, 3, 0, 8, 0, 45, 22, 280, 9, 48, 104, 1, 22, 7, 0, 4, 55, 10, 127],
             [1, 12, 0, 0, 0, 0, 0, 6, 0, 0, 0, 18, 19, 46, 0, 4, 177, 0, 3, 0, 1, 1, 5, 5, 3],
             [2, 0, 0, 1, 0, 1, 7, 2, 0, 33, 0, 0, 2, 7, 1, 0, 5, 125, 0, 0, 4, 0, 0, 7, 12],
             [1, 0, 0, 0, 0, 4, 5, 10, 0, 3, 0, 13, 14, 13, 8, 2, 15, 6, 34, 11, 6, 21, 125, 13, 5],
             [0, 0, 0, 2, 0, 0, 1, 15, 0, 1, 0, 5, 31, 20, 2, 0, 33, 1, 233, 112, 40, 9, 5, 11, 0],
             [16, 6, 0, 0, 0, 1, 19, 1, 0, 5, 0, 8, 39, 88, 2, 0, 5, 2, 4, 2, 145, 8, 32, 16, 33],
             [11, 10, 0, 2, 0, 7, 11, 15, 0, 18, 0, 17, 113, 59, 29, 1, 68, 2, 19, 6, 5, 302, 12, 3, 4],
             [0, 35, 0, 1, 0, 0, 0, 0, 0, 32, 0, 6, 12, 11, 4, 1, 32, 2, 7, 0, 4, 5, 222, 5, 0],
             [0, 15, 0, 18, 0, 0, 4, 9, 0, 2, 0, 3, 0, 22, 6, 0, 1, 19, 4, 54, 3, 0, 14, 63, 1],
             [3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 33, 67, 65, 3, 9, 16, 0, 6, 0, 0, 2, 3, 1, 109]]

conf = conf_seiz
# total_seizures_seiz = np.sum(conf, axis=1)
total_seizures_GAN = np.sum(conf_GAN, axis=1)

# seiz_acc = [2.30532787, 2.36842105, 12.76595745, 4.83271375, 0.33185841,
#             4.6002907, 5.65100154, 1.60493827, 10.77006508, 3.44497608,
#             2.22222222, 3.34033613, 1.95378151, 0.04615385, 3.52459016,
#             12.48293515, 10.12605042, 1.13372093, 7.91602465, 3.8583815,
#             6.50759219, 0.25817556, 1.21670702, 6.40043764, 3.58851675,
#             6.07485605, 3.95833333, 0.88235294, 0.73846154, 2.85714286,
#             2.60526316, 13.125, 2.32342007, 11.42491468, 3.18584071,
#             13.27731092, 5.18895349, 8.88443018, 1.3253012, 4.61671803,
#             7.5813449, 10.45105566, 8.1512605, 1.8907563, 6.13846154,
#             3.11145511, 3.27631579, 1.15241636, 13.1092437, 4.6002907,
#             13.04975923, 1.03614458, 11.37134052, 1.85185185, 1.85466377,
#             10.56478405, 5.31728665, 8.43570058, 5.27310924, 1.95378151
#             ]

# Calculate recall based on the confusion matrix
recall = np.zeros(len(total_seizures_GAN), dtype=np.float)
x = []
for i in range(len(pat_list_test)):
    print('patient: {}, {} out of {}'.format(pat_list_test[i], conf[i][i], total_seizures_GAN[i]))
    recall[i] = conf[i][i] * 100 / total_seizures_GAN[i]
    x.append("Original")
pprint.pprint(recall)
print(np.mean(recall))
print(x)

recall_GAN = [1.63254729, 2.5814234, 3.18429302, 5.7658561, 71.25483693,
              2.29453484, 6.92810458, 2.43445693, 9.41449031, 2.50885478,
              46.52777778, 5.92428712, 5.30049007, 3.05635148, 0.49762497,
              1.41301148, 5.28673835, 3.72245384, 1.14439583, 2.45452553,
              3.55566454, 6.66078518, 4.80207657, 1.1282235, 2.85639413]

recall_seiz = [19.50464396, 21.92622951, 51.32978723, 28.50061958, 73.32195677,
               8.1120944, 74.22969188, 17.00581395, 71.74959872, 6.82730924,
               38.71340524, 33.05898491, 59.39306358, 48.59002169, 3.78657487,
               5.81113801, 58.80398671, 59.80861244, 11.00323625, 21.49712092,
               33.56481481, 42.29691877, 58.57519789, 26.47058824, 33.53846154]


# Violin Chart

# recall_concat = np.concatenate((recall_seiz, recall_GAN))
# flatui = ["#f58220", "#0066b3"]
# label = ['Real ictal'] * 25 + ['Synthetic ictal'] * 25
# d = {'recall': recall_concat, 'label': label}
# df = pd.DataFrame(data=d)
# ax = sns.violinplot(x='label', y='recall', data=df, inner="quartile", cut=0, palette=flatui)
# ax.set_xlim(-0.5, 1.5)
# ax.set_ylim(-1, 100)
# plt.yticks(np.arange(0, 105, 10))
# ax.set_xlabel('')
# ax.set_ylabel('Patients Recall')
# ax.yaxis.grid(True)
# plt.savefig('../results/recall.png')

print(np.percentile(recall_seiz, 75))
print(np.percentile(recall_seiz, 25))
print(np.percentile(recall_seiz, 50))
print(np.percentile(recall_GAN, 75))
print(np.percentile(recall_GAN, 50))
print(np.percentile(recall_GAN, 25))

print(np.array(recall_seiz) > 50)
